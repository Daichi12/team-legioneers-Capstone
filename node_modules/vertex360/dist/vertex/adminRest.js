const utils=require("./utils"),handleSchemaRequest=(e,t)=>{if(-1==["get","post"].indexOf(e.method))throw new Error("Invalid HTTP method: "+e.method);const o=[];return Object.keys(t).forEach(e=>{const r=t[e];o.push({name:e,collectionName:r.collectionName(),schema:r.schema()})}),o},handleCollectionRequest=(e,t)=>new Promise((o,r)=>{if(-1==["get","post"].indexOf(e.method))return void r(new Error("Invalid HTTP method: "+e.method));const n=t[e.resource];if(null!=n)if("get"==e.method){const t=e.event.queryStringParameters||{};n.get(t).then(e=>{o(e)}).catch(e=>{r(e)})}else if("post"==e.method){const t=utils.parseBody(e.event);if(null==t)return void r(new Error("Missing request body."));n.post(t).then(e=>{o(e)}).catch(e=>{r(e)})}else r(new Error("invalid HTTP method: "+e.method));else r(new Error("invalid resource: "+e.resource))}),handleRecordRequest=(e,t)=>{const o=["get","put","delete"];return new Promise((r,n)=>{if(-1==o.indexOf(e.method))return void n(new Error("Invalid HTTP method: "+e.method));const s=t[e.resource];if(null!=s){if("get"==e.method&&s.getById(e.id).then(e=>{r(e)}).catch(e=>{n(e)}),"put"==e.method){const t=utils.parseBody(e.event);if(null==t)return void n(new Error("Missing request body"));s.put(e.id,t).then(e=>{r(e)}).catch(e=>{n(e)})}if("delete"==e.method){const t=e.id;s.delete(t).then(e=>{r({id:t})}).catch(e=>{n(e)})}}else n(new Error("invalid resource: "+e.resource))})};module.exports=((e,t,o)=>new Promise((t,r)=>{if("schema"!=o.type)"collection"!=o.type?"record"!=o.type?r(new Error("Invalid Request")):handleRecordRequest(o,e).then(e=>{t(e)}).catch(e=>{r(e)}):handleCollectionRequest(o,e).then(e=>{t(e)}).catch(e=>{r(e)});else try{const n=handleSchemaRequest(o,e);return void t(n)}catch(e){return void r(e)}}));