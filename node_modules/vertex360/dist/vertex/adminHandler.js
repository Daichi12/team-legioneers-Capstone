const fs=require("fs"),adminRest=require("./adminRest"),utils=require("./utils"),BASE_DIR=__dirname+"/../../../../",handleTask=e=>{const r=["post"];return new Promise((t,s)=>{if(-1==r.indexOf(e.method))return void s(new Error("Invalid HTTP method: "+e.method));const n=utils.parseBody(e.event),l=n.task;if(null!=l){if("resetpage"==l){const e=n.page;if(null==e)return void s(new Error("Missing page parameter"));const r=n.appslug;return null==r?void s(new Error("Missing appslug parameter")):void utils.resetPage(e,r).then(e=>{t(e)}).catch(e=>{s(e)})}s(new Error("Invalid task parameter: "+l))}else s(new Error("Missing task parameter"))})};module.exports=((e,r,t)=>{const s=r.path.split("/"),n=[],l=r.httpMethod.toLowerCase();if(s.forEach(e=>{e.length>0&&"/"!=e&&n.push(e)}),0==n.length){const e=new Error("invalid path. must folow /api/:resource/:id");return void t(null,utils.generateErrorCallback(e,500))}if("api"!=n[0]){const e=new Error("invalid path. must folow /api/:resource/:id");return void t(null,utils.generateErrorCallback(e,500))}const o={method:l,event:r};if(1==n.length?o.type="post"==l?"task":"schema":2==n.length?(o.type="collection",o.resource=n[1].trim().toLowerCase()):(o.type="record",o.resource=n[1].trim().toLowerCase(),o.id=n[2].trim()),"task"==o.type)return void handleTask(o).then(e=>{t(null,utils.generateSuccessCallback(e))}).catch(e=>{t(null,utils.generateErrorCallback(e,500))});if(!fs.existsSync(`${BASE_DIR}/controllers/index.js`)&&!e.opts.controllers)return void t(null,utils.generateSuccessCallback({found:!1,message:"controllers not found."}));const a=e.opts.controllers||require(`${BASE_DIR}/controllers`);a?adminRest(a,r,o).then(e=>{t(null,utils.generateSuccessCallback(e))}).catch(e=>{t(null,utils.generateErrorCallback(e,500))}):t(null,utils.generateSuccessCallback({found:!1,message:"Controllers not found."}))});