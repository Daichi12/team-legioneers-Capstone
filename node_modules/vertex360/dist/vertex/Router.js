const routeMap=require("route-map");class Router{constructor(){this.stem=null,this.getHandler={routeMatcher:null,routes:{}},this.postHandler={routeMatcher:null,routes:{}},this.putHandler={routeMatcher:null,routes:{}},this.deleteHandler={routeMatcher:null,routes:{}}}setStem(t){this.stem=t}parseRoute(t){let e="/"==t.path?"/":t.path.replace(this.stem,"");if(0==e.length&&(e="/"),e.length>1){const t=e.length-1;"/"==e[t]&&(e=e.substring(0,t))}return e}matchRoute(t,e){let s=null;if("get"==e&&(s=this.getHandler.routeMatcher),"post"==e&&(s=this.postHandler.routeMatcher),"put"==e&&(s=this.putHandler.routeMatcher),"delete"==e&&(s=this.deleteHandler.routeMatcher),null==s)return null;const r=s(t);if(null==r)return null;const u=r.fn;return null==u?null:{routeHandler:u,routeParams:r}}get(t,e){this.getHandler.routes[t]=e,this.getHandler.routeMatcher=routeMap(this.getHandler.routes)}handleGet(t){return"/"==this.stem?this.matchRoute(t.path,"get"):t.path.substring(0,this.stem.length)!=this.stem?null:this.matchRoute(this.parseRoute(t),"get")}post(t,e){this.postHandler.routes[t]=e,this.postHandler.routeMatcher=routeMap(this.postHandler.routes)}handlePost(t){return"/"==this.stem?this.matchRoute(t.path,"post"):t.path.substring(0,this.stem.length)!=this.stem?null:this.matchRoute(this.parseRoute(t),"post")}put(t,e){this.putHandler.routes[t]=e,this.putHandler.routeMatcher=routeMap(this.putHandler.routes)}handlePut(t){return"/"==this.stem?this.matchRoute(t.path,"put"):t.path.substring(0,this.stem.length)!=this.stem?null:this.matchRoute(this.parseRoute(t),"put")}delete(t,e){this.deleteHandler.routes[t]=e,this.deleteHandler.routeMatcher=routeMap(this.deleteHandler.routes)}handleDelete(t){return"/"==this.stem?this.matchRoute(t.path,"delete"):t.path.substring(0,this.stem.length)!=this.stem?null:this.matchRoute(this.parseRoute(t),"delete")}}module.exports=Router;