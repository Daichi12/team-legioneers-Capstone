const path=require("path"),fs=require("fs"),TaskMgr=require("./TaskMgr"),utils=require("./utils"),{Document:Document,connect:connect}=require("../camo"),BASE_DIR=__dirname+"/../../../../",TMP_DIR=process.env.TMP_DIR||"/tmp",LOCAL_DIR=path.join(BASE_DIR,TMP_DIR),loadCollection=({collectionName:e,filePath:n,TURBO_APP_ID:o,TURBO_API_KEY:t})=>new Promise((c,s)=>{e?o&&"<TURBO_APP_ID>"!==o?t&&"<TURBO_API_KEY>"!==t?utils.fetchSite(o).then(n=>{if(n.api.key!=t)return void s(new Error("Unauthorized"));const o="https://s3.amazonaws.com/turbo360-vertex/stores/"+n.slug+"/"+e+".txt";return utils.fetchTextFile(o)}).then(o=>(TaskMgr.setCompaction=e,utils.writeFile(n,o))).then(e=>{c(e)}).catch(e=>{s(e)}):s(new Error("TURBO_API_KEY name required.")):s(new Error("TURBO_APP_ID name required.")):s(new Error("Collection name required."))}),collectionFileChanged=e=>new Promise((n,o)=>{if(!e)return void n();if(0===e.length||""===e)return void n();if(TaskMgr.dbRef&&TaskMgr.dbRef._collections){const n=TaskMgr.dbRef._collections[e];n&&(console.log("COMPACT DB FILE: "+e),n.persistence.compactDatafile())}if(TaskMgr.sync[e])return void n();TaskMgr.sync[e]=!0;const t=new Date;TaskMgr.queue.push(t.toString()+" - sync collection: "+e);const c={name:"sync-collection",collection:e,site:process.env.TURBO_APP_ID,slug:process.env.TURBO_APP_SLUG};utils.post("https://platform.turbo360-vector.com/sqs/send",c,{Accept:"application/json","Content-Type":"application/json"}).then(e=>{n(e)}).catch(e=>{console.log("sync-collection err: "+e),console.log("sync-collection err: "+JSON.stringify(c)),o(e)})}),setCompactionInterval=()=>{if(null===TaskMgr.setCompaction)return;if(!TaskMgr.dbRef._collections)return void(TaskMgr.setCompaction=null);const e=TaskMgr.dbRef._collections[TaskMgr.setCompaction];e?(e.persistence.setAutocompactionInterval(5e3),TaskMgr.setCompaction=null):TaskMgr.setCompaction=null};class Model extends Document{constructor(e){super()}preFetch(){const e=this;return new Promise((n,o)=>{const{TURBO_ENV:t,TURBO_APP_ID:c,TURBO_API_KEY:s,TURBO_APP_SLUG:r}=process.env,l=e.collectionName(),i="dev"==t?`${LOCAL_DIR}/${l}.db`:`${TMP_DIR}/${l}.db`;fs.existsSync(i)?n():loadCollection({collectionName:l,filePath:i,TURBO_API_KEY:s,TURBO_APP_ID:c}).then(e=>{n(e)}).catch(e=>{o(e)})})}postFetch(){setCompactionInterval()}preSave(){if("prod"!==process.env.TURBO_ENV)return;const e=this;return new Promise((n,o)=>{collectionFileChanged(e.collectionName()).then(e=>{n(e)}).catch(e=>{o(e)})})}postSave(){setCompactionInterval()}preDelete(){if("prod"!==process.env.TURBO_ENV)return;const e=this;return new Promise((n,o)=>{collectionFileChanged(e.collectionName()).then(e=>{n(e)}).catch(e=>{o(e)})})}postDelete(){setCompactionInterval()}}const nedbConnect=(e,n,o)=>{let t;connect(e).then(e=>{TaskMgr.dbRef=e,t=e,o()}).catch(e=>{console.log("DB ERROR: "+e.message),n(e)})};module.exports={Model:Model,connect:(e,n,o)=>{nedbConnect(e,n,o)},connectNedb:(e,n,o)=>{nedbConnect(e,n,o)},nedbConfig:(e,n,o)=>({url:e,type:"nedb",onError:e=>{null==o?console.log("DB Connection Failed!"):o(e)},onSuccess:()=>{null==n?console.log("DB Successfully Connected!"):n()}}),nedb:(e,n)=>{const o=process.env.TMP_DIR||"/tmp";return{url:"dev"==process.env.TURBO_ENV?"nedb://"+path.join(BASE_DIR,o):"nedb://"+o,type:"nedb",onError:e=>{null==n?console.log("DB Connection Failed!"):n(e)},onSuccess:()=>{null==e?console.log("DB Successfully Connected!"):e()}}}};